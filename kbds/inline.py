from aiogram.types import InlineKeyboardButton
from aiogram.utils.keyboard import InlineKeyboardBuilder
from aiogram.filters.callback_data import CallbackData

#–ù–∞—á–∞–ª—å–Ω—ã–π –º–∞—Ä–∫–µ—Ä –¥–ª—è callbacks ---> prefix = "menu"
class MenuCallBack(CallbackData, prefix="menu"):
    level: int
    menu_name: str
    category: int | None = None
    page: int = 1
    product_id: int | None = None



def get_user_main_btns(*, level: int, sizes: tuple[int] = (2,)):
    keyboard = InlineKeyboardBuilder()
    btns = {
        "–¢–æ–≤–∞—Ä—ã üçï": "catalog",
        "–ö–æ—Ä–∑–∏–Ω–∞ üõí": "cart",
        "–û –Ω–∞—Å üìå": "about",
        "–û–ø–ª–∞—Ç–∞ üí∞": "payment",
        "–î–æ—Å—Ç–∞–≤–∫–∞ üèéÔ∏è": "shipping",
    }
    for text, menu_name in btns.items():
        if menu_name == 'catalog':
            keyboard.add(InlineKeyboardButton(text=text,
                                              callback_data=MenuCallBack(level=level+1, menu_name=menu_name).pack())) # pack - —Ñ–æ—Ä–º–∏—Ä—É–µ—Ç —Å—Ç—Ä–æ–∫—É –∏–∑ –ø–æ–ª—É—á–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
        elif menu_name == 'cart':
            keyboard.add(InlineKeyboardButton(text=text,
                                              callback_data=MenuCallBack(level=3, menu_name=menu_name).pack()))
        else:
            keyboard.add(InlineKeyboardButton(text=text,
                                              callback_data=MenuCallBack(level=level, menu_name=menu_name).pack()))
        
    return keyboard.adjust(*sizes).as_markup()


def get_user_catalog_btns(*, level: int, categories: list, sizes: tuple[int] = (2,)):
    keyboard = InlineKeyboardBuilder()
    
    keyboard.add(InlineKeyboardButton(text="–ù–∞–∑–∞–¥",
                                      callback_data=MenuCallBack(level=level-1, menu_name="main").pack()))
    keyboard.add(InlineKeyboardButton(text="–ö–æ—Ä–∑–∏–Ω–∞ üõí",
                                      callback_data=MenuCallBack(level=3, menu_name='cart').pack()))
    
    for c in categories:
        keyboard.add(InlineKeyboardButton(text=c.name,
                                          callback_data=MenuCallBack(level=level+1, menu_name=c.name, category=c.id).pack()))
        
    return keyboard.adjust(*sizes).as_markup()


def get_products_btns(
    *,
    level: int,
    category: int,
    page: int, # –ê–∫—É—Ç–∞–ª—å–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞
    paginator_btns: dict, # –∫–Ω–æ–ø–∫–∏ –Ω–∞–∑–∞–¥/–≤–ø–µ—Ä–µ–¥
    product_id: int, # –¥–ª—è —Ä–∞–∑–º–µ—â–µ–Ω–∏—è –∫–Ω–æ–ø–∫–∏ –∫—É–ø—Ç–∏—å –Ω–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–º —Ç–æ–≤–∞—Ä–µ
    sizes: tuple[int] = (2, 1)
):
    keyboard = InlineKeyboardBuilder()
    
    keyboard.add(InlineKeyboardButton(text="–ù–∞–∑–∞–¥",
                                      callback_data=MenuCallBack(level=level-1, menu_name="catalog").pack()))
    keyboard.add(InlineKeyboardButton(text="–ö–æ—Ä–∑–∏–Ω–∞ üõí",
                                      callback_data=MenuCallBack(level=3, menu_name='cart').pack()))
    keyboard.add(InlineKeyboardButton(text="–ö—É–ø–∏—Ç—å üí≥",
                                      callback_data=MenuCallBack(level=level, menu_name="add_to_cart", product_id=product_id).pack()))
    #–ö–Ω–æ–ø–∫–∞ –Ω–µ –±—É–¥–µ—Ç –º–µ–Ω—è—Ç—å —É—Ä–æ–≤–µ–Ω—å, –±—É–¥–µ—Ç –≤—ã–≤–æ–¥–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ, —á—Ç–æ —Ç–æ–≤–∞—Ä –¥–æ–±–∞–≤–ª–µ–Ω –≤ –∫–æ—Ä–∑–∏–Ω—É

    keyboard.adjust(*sizes)
    
    row = []
    for text, menu_name in paginator_btns.items():
        if menu_name == "next":
            row.append(InlineKeyboardButton(text=text,
                                            callback_data=MenuCallBack(
                                                level=level,
                                                menu_name=menu_name,
                                                category=category,
                                                page=page + 1).pack()))
        elif menu_name == "previous":
            row.append(InlineKeyboardButton(text=text,
                                            callback_data=MenuCallBack(
                                                level=level,
                                                menu_name=menu_name,
                                                category=category,
                                                page=page - 1).pack()))
    
    return keyboard.row(*row).as_markup()
        




# –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –∫–Ω–æ–ø–∫–∏ –ø–æ —Å–ª–æ–≤–∞—Ä—é 
def get_callback_btns(*, btns: dict[str, str], sizes: tuple[int] = (2,)):
    keyboard = InlineKeyboardBuilder()
    
    for text, data in btns.items():
        # –î–æ–±–∞–≤–ª—è–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä –∫–ª–∞—Å—Å–∞ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∫–Ω–æ–ø–∫–∏
        keyboard.add(InlineKeyboardButton(text=text, callback_data=data))
        
    return keyboard.adjust(*sizes).as_markup()












# #–î–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å—Å—ã–ª–∫–∏ - –ø—Ä–∏ –Ω–∞–∂–∞—Ç–∏–∏ –æ—Ç–∫—Ä—ã–≤–∞–µ—Ç—Å—è —Å–∞–π—Ç - –≤–Ω–µ—à–Ω–∏–π –∏—Å—Ç–æ—á–Ω–∏–∫ –ø–æ url
# def get_url_btns(
#     *,
#     btns: dict[str, str],
#     sizes: tuple[int] = (2,)):
    
#     keyboard = InlineKeyboardBuilder()
    
#     for text, url in btns.items():
#         # –î–æ–±–∞–≤–ª—è–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä –∫–ª–∞—Å—Å–∞ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∫–Ω–æ–ø–∫–∏
#         keyboard.add(InlineKeyboardButton(text=text, url=url))
        
#     return keyboard.adjust(*sizes).as_markup()


# #–°–æ–∑–¥–∞–Ω–∏–µ –º–∏–∫—Å–∞ –∏–∑ Callback –∏ URL –ö–Ω–æ–ø–æ–∫
# def get_inlineMix_btns(
#     *, # –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –∑–∞–ø—Ä–µ—Ç –Ω–∞ –ø–µ—Ä–µ–¥–∞—á—É –Ω–µ–∏–º–µ–Ω–Ω–æ–≤–∞–Ω–Ω—ã—Ö –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤, —Ç–æ –µ—Å—Ç—å –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –Ω—É–∂–Ω–æ —É–∫–∞–∑—ã–≤–∞—Ç—å text, url and etc
#     btns: dict[str, str],
#     sizes: tuple[int] = (2,)):
    
#     keyboard = InlineKeyboardBuilder()
    
#     for text, value in btns.items():
#         if '://' in value:
#             keyboard.add(InlineKeyboardButton(text=text, url=value))
#         else:
#             keyboard.add(InlineKeyboardButton(text=text, callback_data=value))
        
#     return keyboard.adjust(*sizes).as_markup()


# def get_keyboard(
#     *btns: str,
#     placeholder: str = None,
#     request_contact: int = None,
#     request_location: int = None,
#     sizes: tuple[int] = (2,),
# ):
#     '''
#     Parameters request_contact and request_location must be as indexes of btns args for buttons you need.
#     Example:
#     get_keyboard(
#             "–ú–µ–Ω—é",
#             "–û –º–∞–≥–∞–∑–∏–Ω–µ",
#             "–í–∞—Ä–∏–∞–Ω—Ç—ã –æ–ø–ª–∞—Ç—ã",
#             "–í–∞—Ä–∏–∞–Ω—Ç—ã –¥–æ—Å—Ç–∞–≤–∫–∏",
#             "–û—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞"
#             placeholder="–ß—Ç–æ –≤–∞—Å –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç?",
#             request_contact=4,
#             sizes=(2, 2, 1)
#         )
#     '''
#     keyboard = ReplyKeyboardBuilder()

#     for index, text in enumerate(btns, start=0):
        
#         if request_contact and request_contact == index:
#             keyboard.add(KeyboardButton(text=text, request_contact=True))

#         elif request_location and request_location == index:
#             keyboard.add(KeyboardButton(text=text, request_location=True))
#         else:

#             keyboard.add(KeyboardButton(text=text))

#     return keyboard.adjust(*sizes).as_markup(
#             resize_keyboard=True, input_field_placeholder=placeholder)

